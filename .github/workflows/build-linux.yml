name: Linux

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]
      
jobs:
  build_engine:
    name: Build NLP-ENGINE
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-22.04, ubuntu-20.04] 
        

    env:
      VCPKG_DEFAULT_TRIPLET: x64-linux

    steps:

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: true



    # ===============================
    # Ubuntu 20.04 (Docker Build)
    # ===============================
# 3. Now run Docker


      # ===============================
      # Ubuntu 20.04 (Docker Build)
      # ===============================
      - name: Build and Run (Ubuntu 20.04)
        if: matrix.os == 'ubuntu-20.04'
        uses: addnab/docker-run-action@v3
        with:
          image: ubuntu:20.04
          options: >-
            --shm-size=512m
            --mount type=tmpfs,destination=/dev/shm
            -v ${{ github.workspace }}:/workspace
            -w /workspace
          run: |
            export DEBIAN_FRONTEND=noninteractive
            export TZ=Etc/UTC
            apt update && apt install -y \
              git build-essential cmake g++ curl unzip zip tar \
              autoconf-archive pkg-config python3 ninja-build libicu-dev
            git clone --recurse-submodules https://github.com/VisualText/analyzers.git analyzers

            # ✅ Bootstrap and install vcpkg for 20.04
            ./vcpkg/bootstrap-vcpkg.sh
            ./vcpkg/vcpkg install

            # ✅ Build using vcpkg toolchain
            mkdir -p build
            cmake -DCMAKE_BUILD_TYPE=Release \
                  -DVCPKG_BUILD_TYPE=release \
                  -DCMAKE_TOOLCHAIN_FILE="/workspace/vcpkg/scripts/buildsystems/vcpkg.cmake" \
                  -B build -S .
            cmake --build build --target all

            mkdir -p rfb-logs data/rfb/spec analyzers/parse-en-us/output
            cp ./bin/nlp ./bin/nlpl.exe  # ✅ Create nlpl.exe
            ./bin/nlp --version
            ./bin/nlp -ANA ./analyzers/parse-en-us -WORK ./ ./analyzers/parse-en-us/input/doj.txt -LOG rfb-logs -DEV

      - name: Install Required Dependencies (Non-20.04)
        if: matrix.os != 'ubuntu-20.04'
        run: |
          sudo apt update
          sudo apt install -y autoconf-archive pkg-config python3 ninja-build build-essential cmake g++ git curl zip unzip tar

      - name: Vcpkg Bootstrap Shell (Non-20.04)
        if: matrix.os != 'ubuntu-20.04'
        run: ./bootstrap-vcpkg.sh
        shell: bash
        working-directory: vcpkg

      - name: Install 3rd Party (Non-20.04)
        if: matrix.os != 'ubuntu-20.04'
        run: vcpkg install
        working-directory: vcpkg

      - name: Create Build Directory (Non-20.04)
        if: matrix.os != 'ubuntu-20.04'
        run: mkdir -p build

      - name: Generate Solution Linux (Non-20.04)
        if: matrix.os != 'ubuntu-20.04'
        run: |
          cmake -DCMAKE_BUILD_TYPE=Release \
                -DVCPKG_BUILD_TYPE=release \
                -B build -S . \
                -DCMAKE_TOOLCHAIN_FILE='${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake'

      - name: Cmake Build all targets Linux (Non-20.04)
        if: matrix.os != 'ubuntu-20.04'
        run: cmake --build build/ --target all

      - name: Test executable --version (Non-20.04)
        if: matrix.os != 'ubuntu-20.04'
        run: ./bin/nlp --version || true
 
      - name: Copy nlp.exe to nlpl.exe (Non-20.04)
        if: matrix.os != 'ubuntu-20.04'
        run: cp bin/nlp bin/nlpl.exe
        shell: bash


      # ✅ Upload Executable with Updated Naming
      - name: Upload nlpl.exe (Ubuntu 20.04)
        if: matrix.os == 'ubuntu-20.04'
        uses: actions/upload-artifact@v4
        with:
          name: nlpl-ubuntu-20.04.exe
          path: bin/nlpl.exe



      - name: Upload nlpl.exe (Ubuntu 22.04)
        if: matrix.os == 'ubuntu-22.04'
        uses: actions/upload-artifact@v4
        with:
          name: nlpl-ubuntu-22.04.exe
          path: bin/nlpl.exe

      - name: Upload nlpl.exe (Ubuntu Latest)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: nlpl-ubuntu-latest.exe
          path: bin/nlpl.exe


      # ✅ Upload Libraries with Updated Naming
      - name: Upload libicutu (Ubuntu 20.04)
        if: matrix.os == 'ubuntu-20.04'
        uses: actions/upload-artifact@v4
        with:
          name: libicutu-ubuntu-20.04.a
          path: vcpkg_installed/x64-linux/lib/libicutu.a

      - name: Upload libicutu (Ubuntu 22.04)
        if: matrix.os == 'ubuntu-22.04'
        uses: actions/upload-artifact@v4
        with:
          name: libicutu-ubuntu-22.04.a
          path: vcpkg_installed/x64-linux/lib/libicutu.a

      - name: Upload libicutu (Ubuntu Latest)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: libicutu-ubuntu-latest.a
          path: vcpkg_installed/x64-linux/lib/libicutu.a

      - name: Upload libicuuc (Ubuntu 20.04)
        if: matrix.os == 'ubuntu-20.04'
        uses: actions/upload-artifact@v4
        with:
          name: libicuuc-ubuntu-20.04.a
          path: vcpkg_installed/x64-linux/lib/libicuuc.a

      - name: Upload libicuuc (Ubuntu 22.04)
        if: matrix.os == 'ubuntu-22.04'
        uses: actions/upload-artifact@v4
        with:
          name: libicuuc-ubuntu-22.04.a
          path: vcpkg_installed/x64-linux/lib/libicuuc.a

      - name: Upload libicuuc (Ubuntu Latest)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: libicuuc-ubuntu-latest.a
          path: vcpkg_installed/x64-linux/lib/libicuuc.a
          


      # Analyzers Repo - only checkout if NOT 20.04
      - name: Checkout Analyzers Repo
        if: matrix.os != 'ubuntu-20.04'
        uses: actions/checkout@v3
        with:
          repository: VisualText/analyzers
          submodules: recursive
          path: analyzers

       # Prepare folders
      - name: Prepare folders
        run: mkdir -p rfb-logs data/rfb/spec


      - name: Full English Test (20.04)
        if: matrix.os == 'ubuntu-20.04'
        uses: LouisBrunner/diff-action@v0.2.0
        with:
          old: .github/workflows/tests/parse-en-us/final.tree
          new: ./rfb-logs/final.tree
          mode: addition
          tolerance: same
          output: parse-en-us-diff-lin.txt


      # ✅ Parser test for Ubuntu 22.04 & latest
      - name: Run English Parser Test (Non-20.04)
        if: matrix.os != 'ubuntu-20.04'
        run: ./bin/nlp -ANA ./analyzers/parse-en-us -WORK ./ ./analyzers/parse-en-us/input/doj.txt -DEV || true

      - name: Full English Test (Non-20.04)
        if: matrix.os != 'ubuntu-20.04'
        uses: LouisBrunner/diff-action@v0.2.0
        with:
          old: .github/workflows/tests/parse-en-us/final.tree
          new: ./analyzers/parse-en-us/input/doj.txt_log/final.tree
          mode: addition
          tolerance: same
          output: parse-en-us-diff-lin.txt
